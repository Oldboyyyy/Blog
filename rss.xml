<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>YC Blog</title>
    <link>https://oldboyyyy.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>小白的大牛梦！</description>
    <pubDate>Thu, 30 Mar 2017 15:19:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>条件渲染与列表渲染</title>
      <link>https://oldboyyyy.github.io/2017/03/30/vue-4/</link>
      <guid>https://oldboyyyy.github.io/2017/03/30/vue-4/</guid>
      <pubDate>Thu, 30 Mar 2017 15:18:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a&gt;条件渲染&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;条件渲染，就满足一定的条件以后才会渲染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;v-if&quot;&gt;&lt;a href=&quot;#v-if&quot; class=&quot;headerlink&quot; title=&quot;v-if&quot;&gt;&lt;/a&gt;v-if&lt;/h3&gt;&lt;p&gt;&lt;code&gt;v-if&lt;/code&gt;指令类似于，&lt;code&gt;js&lt;/code&gt;中的&lt;code&gt;if&lt;/code&gt;语句，当条件满足时才会执行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span v-if=&amp;quot;ok&amp;quot;&amp;gt;v-if&amp;lt;/span&amp;gt; //ok的值为true，span标签才会被渲染&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;template v-if=&amp;quot;ok&amp;quot;&amp;gt; //同时渲染多个元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;p&amp;gt;Paragraph 1&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;p&amp;gt;Paragraph 2&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/template&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var vm = new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       el: &amp;apos;#app&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           ok: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           no: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           type: &amp;apos;c&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           toggle: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><blockquote>
<p>条件渲染，就满足一定的条件以后才会渲染。</p>
</blockquote>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p><code>v-if</code>指令类似于，<code>js</code>中的<code>if</code>语句，当条件满足时才会执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;span v-if=&quot;ok&quot;&gt;v-if&lt;/span&gt; //ok的值为true，span标签才会被渲染</div><div class="line">&lt;template v-if=&quot;ok&quot;&gt; //同时渲染多个元素</div><div class="line">  &lt;h1&gt;Title&lt;/h1&gt;</div><div class="line">  &lt;p&gt;Paragraph 1&lt;/p&gt;</div><div class="line">  &lt;p&gt;Paragraph 2&lt;/p&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">       el: &apos;#app&apos;,</div><div class="line">       data: &#123;</div><div class="line">           ok: true,</div><div class="line">           no: true,</div><div class="line">           type: &apos;c&apos;,</div><div class="line">           toggle: true</div><div class="line">       &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p><code>v-else</code>指令，类似于<code>js</code>中的<code>else</code>语句，当<code>v-if</code>条件不成立是，<code>v-else</code>就会渲染。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;span v-if=&quot;ok&quot;&gt;v-if&lt;/span&gt;</div><div class="line">&lt;span v-else&gt;v-else&lt;/span&gt; //当ok 的值为false，是渲染</div></pre></td></tr></table></figure></p>
<p><em><code>v-else</code>必须紧跟着在<code>v-if</code>或者<code>v-else-if</code>的到后面，否则不会被识别。</em></p>
<h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p>是<code>2.1.0</code>新增加的指令，类似于<code>js</code>中的<code>else if</code>，可以链式使用多次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p v-if=&quot;type === &apos;a&apos;&quot;&gt;a&lt;/p&gt;</div><div class="line">&lt;p v-else-if=&quot;type === &apos;b&apos;&quot;&gt;b&lt;/p&gt;</div><div class="line">&lt;p v-else=&quot;&quot;&gt;not a and b&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p><em><code>v-else-if</code>必须紧跟着在<code>v-if</code>或者<code>v-else-if</code>的到后面，否则不会被识别。</em></p>
<h3 id="用key管理可复用的元素"><a href="#用key管理可复用的元素" class="headerlink" title="用key管理可复用的元素"></a>用key管理可复用的元素</h3><p><code>vue</code>会尽可能的高效的渲染元素，通常会复用已有元素而不会从头渲染<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p v-if=&quot;toggle&quot;&gt;&lt;label&gt;username &lt;/label&gt; &lt;input type=&quot;text&quot; placeholder=&quot;username&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;p v-else=&quot;&quot;&gt;&lt;label&gt;email&lt;/label&gt; &lt;input type=&quot;text&quot; placeholder=&quot;email&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;button @click=&quot;toggle = !toggle&quot;&gt;toggle&lt;/button&gt;</div></pre></td></tr></table></figure></p>
<p>上面例子因为两个<code>p标签</code>用用了相同的元素，<code>&lt;input&gt;</code>不会被替换掉，仅仅是替换了他的<code>placeholder</code>。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-9fb69e6edec0f69e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="username显示时，输入框里面输入的1"><br><img src="http://upload-images.jianshu.io/upload_images/4760143-f7fd73485e26452c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="切换到，email是1任然存在，说明input是复用之前的input"></p>
<p> 当我们不想复用他们时，只要加上唯一的key属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p v-if=&quot;toggle&quot;&gt;&lt;label&gt;username &lt;/label&gt; &lt;input type=&quot;text&quot; placeholder=&quot;username&quot; key=&quot;username&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;p v-else=&quot;&quot;&gt;&lt;label&gt;email&lt;/label&gt; &lt;input type=&quot;text&quot; placeholder=&quot;email&quot; key=&quot;email&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;button @click=&quot;toggle = !toggle&quot;&gt;toggle&lt;/button&gt;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-b5aa38956e8f58a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="加上可以以后，在username上输入了1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-1675e9c1cf0a0cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="切换到email下，1不见了，说明两个input不是同一个，没有复用之前的了"></p>
<p><em>注意, <label> 元素仍然会被高效地复用，因为它们没有添加 key 属性。</label></em></p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show与v-if的用法几乎一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span v-show=&quot;ok&quot;&gt;v-show&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<h3 id="v-show-VS-v-if"><a href="#v-show-VS-v-if" class="headerlink" title="v-show VS v-if"></a>v-show VS v-if</h3><ul>
<li><code>v-show</code>不支持 <code>&lt;template&gt;</code> 语法，也不支持<code>v-else</code>。</li>
<li><code>v-if</code> 是真正的条件渲染，因为他确保在切换过程中条件块内部的事件监听器和子组件适当的被销毁和重建</li>
<li><code>v-if</code>也是惰性的，如果在处事渲染时条件为假，则什么也不做，直到条件为真时，才开始渲染条件块</li>
<li><code>v-show</code>就简单的多，不管条件是啥总会被渲染，并且只是简单的基于<code>css</code>的切换</li>
<li>一般需要频繁的切换就是用<code>v-show</code>，运行条件不太会改变则使用<code>v-if</code></li>
<li>当 <code>v-if</code>与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级</li>
</ul>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>我们用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染。基本用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">         &lt;li v-for=&quot;item in items&quot; v-text=&quot;item.text&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">           items: [</div><div class="line">               &#123;text: &apos;item1&apos;&#125;,</div><div class="line">               &#123;text: &apos;item2&apos;&#125;,</div><div class="line">               &#123;text: &apos;item3&apos;&#125;</div><div class="line">           ]</div><div class="line">        &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-b2d53a0d6c5c137d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基本用法示例"></p>
<p><em>v-for 还支持可选的第二个参数为当前项的索引</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;(val,index) in items&quot; v-text=&quot;(index+1) + &apos;. &apos; + val.text&quot;&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-8cea72e028339da5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="带了索引的示例"></p>
<p><em>利用template标签同时渲染多个标签</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">      &lt;template v-for=&quot;(val, index) in items&quot;&gt;</div><div class="line">          &lt;li&gt;&#123;&#123;index&#125;&#125;&lt;/li&gt;</div><div class="line">          &lt;li&gt;&#123;&#123;val.text&#125;&#125;&lt;/li&gt;</div><div class="line">       &lt;/template&gt;</div><div class="line"> &lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-96efcac485438d58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="同时渲染两个li的示例"></p>
<p><em>对象的迭代，是按 <code>Object.keys()</code> 的结果遍历，但是不能保证它的结果在不同的 <code>JavaScript</code> 引擎下是一致的</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span v-for=&quot;key in obj&quot;&gt;&#123;&#123;key&#125;&#125;&lt;/span&gt;</div><div class="line">&lt;p v-for=&quot;(key, value) in obj&quot;&gt;&#123;&#123;key&#125;&#125;: &#123;&#123;value&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;p v-for=&quot;(key, value, index) in obj&quot;&gt;&#123;&#123;key&#125;&#125;: &#123;&#123;value&#125;&#125;: &#123;&#123;index&#125;&#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-f416fab25aeaff03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对象迭代示例"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button v-for=&quot;i in 10&quot;&gt;&#123;&#123;i&#125;&#125;&lt;/button&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-c2bfff7d3d87e178.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="整数迭代示例"></p>
<p>当迭代渲染遇上组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;#app&quot;&gt;</div><div class="line">    &lt;my-ul :items=&quot;items&quot;&gt;&lt;/my-ul&gt; //将数据注入子组件</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;template id=&quot;myul&quot;&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li v-for=&quot;i in items&quot;&gt;&#123;&#123;i.text&#125;&#125;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    Vue.component(&apos;my-ul&apos;,&#123;</div><div class="line">        template: &apos;#myul&apos;,</div><div class="line">        props: [&apos;items&apos;]  //接受父组件传进了的数据</div><div class="line">    &#125;);</div><div class="line"> var vm = new Vue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">           items: [</div><div class="line">               &#123;text: &apos;item1&apos;&#125;,</div><div class="line">               &#123;text: &apos;item2&apos;&#125;,</div><div class="line">               &#123;text: &apos;item3&apos;&#125;</div><div class="line">           ]</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-6b2fb5017571f3e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="组件循环示例"></p>
<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>当 <code>Vue.js</code> 用 <code>v-for</code> 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。<br>建议尽可能使用<code>v-for</code> 来提供 <code>key</code> ，除非迭代 <code>DOM</code> 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。用法跟前面一样。</p>
<h3 id="数组的更新检查"><a href="#数组的更新检查" class="headerlink" title="数组的更新检查"></a>数组的更新检查</h3><p><code>Vue</code>包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()<br>这些方法都会改变原数组，也有一些方法是返回一个新数组，不会改变原数组。例如： filter(), concat(), slice() 。当使用非变异方法时，可以用新数组替换旧数组。<br><strong><em>注意事项</em></strong><br>由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</li>
<li>当你利用索引直接设置一个项时，例如： <code>vm.items[indexOfItem] = newValue</code></li>
<li>当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></li>
</ul>
<p>解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.set(example1.items, indexOfItem, newValue)</div><div class="line">example1.items.splice(indexOfItem, 1, newValue)</div><div class="line">example1.items.splice(newLength)</div></pre></td></tr></table></figure></p>
<h3 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h3><p>我们想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">奇数：&lt;span v-for=&quot;i in odd&quot;&gt;&#123;&#123;i&#125;&#125;&lt;/span&gt;</div><div class="line">偶数：&lt;span v-for=&quot;i in even(number)&quot;&gt;&#123;&#123;i&#125;&#125;&lt;/span&gt;</div><div class="line"></div><div class="line">var vm = new Vue(&#123;</div><div class="line">       el: &apos;#app&apos;,</div><div class="line">       data: &#123;                </div><div class="line">           number: [1,2,3,4,5,6]</div><div class="line">       &#125;,</div><div class="line">       computed: &#123;</div><div class="line">           odd: function()&#123;</div><div class="line">               return this.number.filter(function(i)&#123;</div><div class="line">                   return i%2 === 1;</div><div class="line">               &#125;)</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       methods: &#123;</div><div class="line">           even: function(arr)&#123;</div><div class="line">               return arr.filter(function(i)&#123;</div><div class="line">                   return i%2 === 0;</div><div class="line">               &#125;)</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-a9e5e7a9f3e28d7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="过滤示例"></p>
<h2 id="官方API"><a href="#官方API" class="headerlink" title="官方API"></a>官方API</h2><p><a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="external">Vue</a></p>
]]></content:encoded>
      
      <comments>https://oldboyyyy.github.io/2017/03/30/vue-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算属性 computed</title>
      <link>https://oldboyyyy.github.io/2017/03/26/vue-3/</link>
      <guid>https://oldboyyyy.github.io/2017/03/26/vue-3/</guid>
      <pubDate>Sun, 26 Mar 2017 10:16:28 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;模板表达式是非常的便利，也可以进行简单的运算，但是面对较为复杂的运算，就会让模板变得那已维护。面对相对复杂的运算应该选用计算属性来处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;简单的例子&quot;&gt;&lt;a href=&quot;#简单的例子&quot; class=&quot;headerlink&quot; title=&quot;简单的例子&quot;&gt;&lt;/a&gt;简单的例子&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt;&amp;#123;&amp;#123;msg&amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt;computed:&amp;#123;&amp;#123;reverseMsg&amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var vm = new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       el: &amp;apos;#app&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           msg: &amp;apos;hello Vue!&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       computed: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           reverseMsg: function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                return this.msg.split(&amp;apos; &amp;apos;).reverse().join(&amp;apos; &amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote>
<p>模板表达式是非常的便利，也可以进行简单的运算，但是面对较为复杂的运算，就会让模板变得那已维护。面对相对复杂的运算应该选用计算属性来处理</p>
</blockquote>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;p&gt;computed:&#123;&#123;reverseMsg&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">       el: &apos;#app&apos;,</div><div class="line">       data: &#123;</div><div class="line">           msg: &apos;hello Vue!&apos;</div><div class="line">       &#125;,</div><div class="line">       computed: &#123;</div><div class="line">           reverseMsg: function()&#123;</div><div class="line">                return this.msg.split(&apos; &apos;).reverse().join(&apos; &apos;);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>结果是：<br><img src="http://upload-images.jianshu.io/upload_images/4760143-43fd328d84eaea99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"><br>我们先声明一个计算属性<code>reverseMsg</code>。我们提供的函数将作为<code>vm.reverseMsg</code>的<code>getter</code>；<br><code>vm.reverseMsg</code>的值是取决于<code>vm.message</code>的值。<br><code>Vue</code>知道<code>vm.reverseMsg</code>的值是依赖于<code>vm.msg</code>，因此当<code>vm.msg</code>发生改变时，所有依赖于<code>vm.reverseMsg</code>的绑定也会更新。</p>
<h3 id="计算缓存-VS-Methods"><a href="#计算缓存-VS-Methods" class="headerlink" title="计算缓存 VS Methods"></a>计算缓存 VS Methods</h3><p>我们也可以通过利用<code>Methods</code>来达到同样的效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;methods:&#123;&#123;reverseMsgfn()&#125;&#125;&lt;/p&gt;</div><div class="line"></div><div class="line">... //其他的代码省略</div><div class="line">methods: &#123;</div><div class="line">           reverseMsgfn: function()&#123;</div><div class="line">               return this.msg.split(&apos; &apos;).reverse().join(&apos; &apos;);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><img src="http://upload-images.jianshu.io/upload_images/4760143-91bcb9fd29d45fa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Methods的结果"><br>最终的结果都是一样的，不同的是<code>计算属性</code>是基于他们的依赖进行缓存的;<code>计算属性</code>只有在他的相关依赖发生改变时才会重新求值；这就意味着，在<code>msg</code>值没有发生改变，<code>reverseMsg</code>的值就不会发生改变，这期间多次访问<code>reverseMsg</code>属性都是之前的的计算结果，而是不值再次进行执行函数;如果我们不需要缓存的话，我们就可以用<code>method</code>代替。</p>
<h3 id="计算属性-VS-Watch属性"><a href="#计算属性-VS-Watch属性" class="headerlink" title="计算属性 VS Watch属性"></a>计算属性 VS Watch属性</h3><p><code>Vue</code>提供了一种方式来观察和响应Vue实例上的数据变动：<code>watch</code>属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">     &lt;label for=&quot;&quot;&gt;firstName:&lt;input type=&quot;text&quot; v-model=&apos;firstName&apos;&gt;&lt;/label&gt;</div><div class="line">     &lt;label for=&quot;&quot;&gt;lastName:&lt;input type=&quot;text&quot; v-model=&apos;lastName&apos;&gt;&lt;/label&gt;</div><div class="line">     &lt;p&gt;fullName:&#123;&#123;fullName&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">...//其他代码省略</div><div class="line">watch: &#123;</div><div class="line">       firstName: function(val)&#123;</div><div class="line">             this.fullName = val + &apos; &apos; + this.lastName;</div><div class="line">       &#125;,</div><div class="line">       lastName: function(val)&#123;</div><div class="line">             this.fullName = this.firstName + &apos; &apos; + val;</div><div class="line">       &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>下面使用<code>computed</code>实现的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">     &lt;label for=&quot;&quot;&gt;firstName:&lt;input type=&quot;text&quot; v-model=&apos;firstName&apos;&gt;&lt;/label&gt;</div><div class="line">     &lt;label for=&quot;&quot;&gt;lastName:&lt;input type=&quot;text&quot; v-model=&apos;lastName&apos;&gt;&lt;/label&gt;</div><div class="line">     &lt;p&gt;fullName:&#123;&#123;fullName&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">...//其他代码省略</div><div class="line">computed: &#123;</div><div class="line">        fullName : &#123;</div><div class="line">                get: function()&#123;</div><div class="line">                    return this.firstName +&apos; &apos;+ this.lastName;</div><div class="line">                 &#125;,</div><div class="line">               set: function(newVal)&#123;</div><div class="line">                    var names = newVal.split(&apos; &apos;);</div><div class="line">                    this.firstName =  names[0];</div><div class="line">                    this.lastName = names[names.length - 1];</div><div class="line">                &#125; </div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-ce338fd65a9a3ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="watch和computed结果"><br><code>computed</code>也可以实现相同的效果，而且代码更加简洁易懂<br>计算属性，一般默认只有getter，不过我们也可以提供一个setter,我们就可以通改变<code>fullName</code>值，也可以动态改变<code>firstName</code>和<code>lastName</code>。</p>
<h3 id="观察者-Watchers"><a href="#观察者-Watchers" class="headerlink" title="观察者 Watchers"></a>观察者 Watchers</h3><p>虽然计算属性在大多数情况下是可以替代<code>watch</code>的，但是在执行异步操作或者更大开销操作的时候<code>watch</code>更适合;</p>
<p><code>watch</code>选项允许我们执行异步操作，限制我们操作的频率并在得到结果前设置中间状态，这是计算属性无法做到的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app3&quot;&gt;</div><div class="line">    你的问题是：&lt;input type=&quot;text&quot; v-model=&quot;question&quot;&gt;</div><div class="line">    答案是：&lt;p v-text=&quot;answer&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;https://unpkg.com/axios@0.12.0/dist/axios.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://unpkg.com/lodash@4.13.1/lodash.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    new Vue(&#123;</div><div class="line">        el: &apos;#app3&apos;,</div><div class="line">        data: &#123;</div><div class="line">            question: &apos;&apos;,</div><div class="line">            answer: &apos;你不提问我没法回答&apos;</div><div class="line">        &#125;,</div><div class="line">        watch: &#123;</div><div class="line">            question: function()&#123;</div><div class="line">                this.answer = &apos;问题通常包含一个问号&apos;;</div><div class="line">                this.getAnswer();</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            getAnswer: _.debounce(function () &#123;</div><div class="line">                var _this = this;</div><div class="line">                if(_this.question.indexOf(&apos;?&apos;) === -1)&#123;</div><div class="line">                    return _this.answer = &apos;问题通常包含一个问号&apos;;</div><div class="line">                &#125;</div><div class="line">                _this.answer = &apos;搜索中...&apos;;</div><div class="line">                axios.get(&apos;https://yesno.wtf/api&apos;).then(function(response)&#123;</div><div class="line">                    _this.answer = _.capitalize(response.data.answer);</div><div class="line">                &#125;).catch(function(err)&#123;</div><div class="line">                    _this.answer = &apos;err&apos;</div><div class="line">                &#125;)</div><div class="line">            &#125;,500)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-8ad85a5a26640e05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实例结果"></p>
<h3 id="官方API"><a href="#官方API" class="headerlink" title="官方API"></a>官方API</h3><p><a href="https://cn.vuejs.org/v2/guide/computed.html#计算缓存-vs-Methods" target="_blank" rel="external">Vue</a></p>
]]></content:encoded>
      
      <comments>https://oldboyyyy.github.io/2017/03/26/vue-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>模板语法</title>
      <link>https://oldboyyyy.github.io/2017/03/22/vue-2/</link>
      <guid>https://oldboyyyy.github.io/2017/03/22/vue-2/</guid>
      <pubDate>Wed, 22 Mar 2017 15:12:35 GMT</pubDate>
      <description>
      
        &lt;p&gt;`&amp;gt; Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##插值&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>`&gt; Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>
<blockquote>
<p>在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>
</blockquote>
<p>##插值<br><a id="more"></a></p>
<h3 id="文本"><a href="#文本" class="headerlink" title="#文本"></a>#文本</h3><p>数据绑定最常见的形式就是使用‘Mustache’语法（双大括号）的文本插值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span&gt;message:&#123;&#123;message&#125;&#125;&lt;/span&gt; //最简单的插值应用</div></pre></td></tr></table></figure></p>
<p><code>Mustache</code>会代替对应数据对象上的<code>message</code>属性多对应的值。无论何时只要<code>message</code>的值改变了，插值的内容也会跟着更新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span v-once&gt;&#123;&#123;once&#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p><code>once</code>指令，只会在第一次渲染的时候有效，后面<code>once</code>的值变化都不会影响插值的更新</p>
<h3 id="纯HTML"><a href="#纯HTML" class="headerlink" title="#纯HTML"></a>#纯HTML</h3><p>双大括号只会讲数据解析成纯文本，而非HTML。想要输出正在的HTML，要用<code>v-html</code>指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-html=&quot;html&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>被插入的值都会被当做HTML，数据绑定将会失效。<br><strong><em>注意：站点上动态渲染html是非常危险的，因为很容易被XSS攻击，请给可信任内容提供插值，切勿为用户提供内容插值</em></strong></p>
<h3 id="属性"><a href="#属性" class="headerlink" title="#属性"></a>#属性</h3><p>Mustache不能在HTML属性中去使用，应该使用v-bind。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span v-bind:class=&quot;red&quot;&gt;hello Vue!&lt;/span&gt; //添加class属性</div></pre></td></tr></table></figure></p>
<p>这对布尔值也有效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button v-bind:disabled=&apos;result&apos;&gt;Button&lt;/button&gt;//如果result等于false，disabled属性就会被移除</div></pre></td></tr></table></figure></p>
<h3 id="使用javascript表达式"><a href="#使用javascript表达式" class="headerlink" title="#使用javascript表达式"></a>#使用javascript表达式</h3><p>在模板中可以使用js表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;number + 1&#125;&#125;</div><div class="line">&#123;&#123;ok ? &apos;yes&apos; : &apos;no&apos;&#125;&#125;</div><div class="line">&#123;&#123;msg.split(&apos;,&apos;).reverse().join(&apos;,&apos;)&#125;&#125;</div><div class="line">&lt;p v-bind:id=&quot;&apos;item&apos; + id&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>以下几种情况不会成功，因为他们都不是表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;var a = 1&#125;&#125;//这是语句</div><div class="line">&#123;&#123;if(ok)&#123;code&#125;&#125;&#125;;//流程控制语句，可用三目运算代替</div></pre></td></tr></table></figure></p>
<p><strong><em>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量</em></strong></p>
<p>##指令<br>指令（Directive）是带有V-前缀的特殊属性。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="#参数"></a>#参数</h3><p>一些指令可以接受一个参数，在指令后一冒号指明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p v-bind:id=&apos;id&apos;&gt;1111&lt;/p&gt;//用相应的更新HTML属性</div><div class="line">&lt;p :id=&apos;id&apos;&gt;&lt;/p&gt;//简写</div><div class="line">&lt;p v-on:click=&apos;fn&apos;&gt;1111&lt;/p&gt;//监听dom事件</div><div class="line">&lt;p @click=&apos;fn&apos;&gt;1111&lt;/p&gt;//简写</div></pre></td></tr></table></figure></p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="#修饰符"></a>#修饰符</h3><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>##过滤器</p>
<p>Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式<br>2.0废弃了了1.0的原生过滤器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div><div class="line">new Vue(&#123;</div><div class="line">  // ...</div><div class="line">  filters: &#123;</div><div class="line">    capitalize: function (value) &#123;</div><div class="line">      if (!value) return &apos;&apos;</div><div class="line">      value = value.toString()</div><div class="line">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>过滤器可以串联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>过滤器是 JavaScript 函数，因此可以接受参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | filterA(&apos;arg1&apos;, arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>##官方中文API<br><a href="https://cn.vuejs.org/v2/guide/syntax.html#修饰符" target="_blank" rel="external">Vue</a></p>
]]></content:encoded>
      
      <comments>https://oldboyyyy.github.io/2017/03/22/vue-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Vue实例</title>
      <link>https://oldboyyyy.github.io/2017/03/21/vue-1/</link>
      <guid>https://oldboyyyy.github.io/2017/03/21/vue-1/</guid>
      <pubDate>Tue, 21 Mar 2017 14:53:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;之前学过Vue的官方文档，因为项目中没有用过，很快就忘记得差不多了，所以这次决定重新学习一下，并且记录下自己的学习过程以及自己的想法&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;构造器&quot;&gt;&lt;a href=&quot;#构造器&quot; class=&quot;headerlink&quot; title=&quot;构造器&quot;&gt;&lt;/a&gt;构造器&lt;/h3&gt;&lt;p&gt;每一个Vue.js应用都是通过构造函数Vue创建的一个Vue的根实例启动的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var data = &amp;#123;a: 1&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var vm = new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    el: &amp;apos;#app&amp;apos;, //挂载对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data: data //代理的数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>之前学过Vue的官方文档，因为项目中没有用过，很快就忘记得差不多了，所以这次决定重新学习一下，并且记录下自己的学习过程以及自己的想法</strong></p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>每一个Vue.js应用都是通过构造函数Vue创建的一个Vue的根实例启动的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var data = &#123;a: 1&#125;;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">    el: &apos;#app&apos;, //挂载对象</div><div class="line">    data: data //代理的数据</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="属性与方法"><a href="#属性与方法" class="headerlink" title="属性与方法"></a>属性与方法</h3><p>每一个Vue实例都会代理其<code>data</code>对象里面的所以属性，注意这时代理的<code>data</code>的属性是响应的。如果实例创建以后，添加新的属性到实例上，它不会触发视图更新（后面会详细讨论）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var data = &#123;a: 1&#125;;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">    el: &apos;#app&apos;,</div><div class="line">    data: data</div><div class="line">&#125;);</div><div class="line">vm.a === data.a;//true</div><div class="line">//修改vm的a的值会影响到原始值</div><div class="line">vm.a = 2;</div><div class="line">console.log(data.a); //=&gt; 2</div><div class="line">//反之亦然</div><div class="line">data.a = 3;</div><div class="line">console.log(vm.a);// =&gt; 3</div></pre></td></tr></table></figure></p>
<p>除了data属性，Vue还暴露了一些有用的实例属性与方法。这些方法与属性都是以$开头，以便于代理的data属性区分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">console.log(vm.$data === data); //true</div><div class="line">console.log(vm.$el === document.getElementById(&apos;app&apos;)); //true</div><div class="line"></div><div class="line">vm.$watch(&apos;a&apos;, function(newVal, oldVal)&#123;</div><div class="line">    console.log(&apos;a改变了，新值是&apos;+ newVal +&apos;，旧值是&apos;+ oldVal);</div><div class="line">&#125;);</div><div class="line">vm.a = &apos;a&apos;; //a的值变了，就会触发上面的回调函数</div><div class="line">//a改变了，新值是a，旧值是3</div></pre></td></tr></table></figure></p>
<h3 id="实例的生命周期"><a href="#实例的生命周期" class="headerlink" title="实例的生命周期"></a>实例的生命周期</h3><blockquote>
<p>每一个Vue实例在被创建的之前都要经过一些列的初始化的过程;<br>例如实例需要配备数据观测，模板编译，挂载实例到DOM，然后数据变化到Dom,在这过程中，会调用一系列的生命周期的钩子函数，这就提供了给我们执行自定义逻辑的机会.</p>
</blockquote>
<h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p>盗用官方文档的图：<br><img src="http://upload-images.jianshu.io/upload_images/4760143-c1d266fca1e6135d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="API地址"><a href="#API地址" class="headerlink" title="API地址"></a>API地址</h3><p><a href="https://cn.vuejs.org/v2/guide/instance.html" target="_blank" rel="external">Vue 中文API</a></p>
]]></content:encoded>
      
      <comments>https://oldboyyyy.github.io/2017/03/21/vue-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>webpack起步</title>
      <link>https://oldboyyyy.github.io/2017/03/18/webpack-1/</link>
      <guid>https://oldboyyyy.github.io/2017/03/18/webpack-1/</guid>
      <pubDate>Sat, 18 Mar 2017 12:46:51 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;webpack介绍&quot;&gt;&lt;a href=&quot;#webpack介绍&quot; class=&quot;headerlink&quot; title=&quot;webpack介绍&quot;&gt;&lt;/a&gt;webpack介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="webpack介绍"><a href="#webpack介绍" class="headerlink" title="webpack介绍"></a>webpack介绍</h3><blockquote>
<p>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><a id="more"></a>
<h5 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install webpack --save-dev</div><div class="line">npm install webpack@&lt;version&gt; --save-dev //安装指定版本的webpack</div></pre></td></tr></table></figure>
<h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure>
<h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>webpack打包javascript模块</p>
<p>1.新建一个文件夹，进入文件夹右键打开<code>git bush</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init -y // npm初始化文件会自动建一个 package.json文件</div><div class="line">npm install --save-dev webpack //本地安装webpack</div><div class="line">./node_modules/.bin/webpack --help // windows下这个查看有没有安装好webpack，中文文档这里错了</div></pre></td></tr></table></figure></p>
<p>2.在文件夹中新建一个<code>app</code>文件夹，并新建一个<code>index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function component () &#123;</div><div class="line">  var element = document.createElement(&apos;div&apos;);</div><div class="line"></div><div class="line">  /* 需要引入 lodash，下一行才能正常工作 */</div><div class="line">  element.innerHTML = _.join([&apos;Hello&apos;,&apos;webpack&apos;], &apos; &apos;);</div><div class="line"></div><div class="line">  return element;</div><div class="line">&#125;</div><div class="line"></div><div class="line">document.body.appendChild(component());</div></pre></td></tr></table></figure></p>
<p>3.在根目录下建一个<code>index.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;webpack2&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;--!这里引用的webpack打包以后的js文件--&gt;</div><div class="line">    &lt;script src=&quot;dist/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>4.由于<code>index.js</code>里面引用了<code>lodash.js</code>所以本地必须安装<code>lodash.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -save lodash</div></pre></td></tr></table></figure></p>
<p>5.关键的一部，开始主角上场了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/webpack app/index.js dist/bundle.js</div><div class="line">webpack路径 要打包的文件 打包以后的路劲</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-95769e86f298a9fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="U`$PNW_R2KUC3`53_(XUS~8.png"><br>这样就打包成功了，我们会发现项目根目录下多了一个<code>dist</code>文件夹，里面有个<code>bundle.js</code>文件，这个就是我们打包后的文件<br><em>webpack除了会修改<code>import/export</code>以外不会修改你的代码，如果想使用es6语法需要使用<code>Babel</code>来编译</em></p>
<p>6.除了命令行的方式来完成打包，我们还可以通过配置文件的方式来实现，现在项目根目录新建一个<code>webpack.config.js</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  entry: &apos;./app/index.js&apos;, //入口文件</div><div class="line">  output: &#123;</div><div class="line">    filename: &apos;bundle.js&apos;, //完成打包以后的文件名称</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;) // 打包文件的目录位置</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这时候执行webpack命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --config webpack.config.js</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-aa66766c44b544b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="380)_C9K2$Z6BIMMI~MHX}I.png"><br>配置文件可以是我们灵活的是用webpack。使用配置文件，我们可以对bundle添加加载器规则、插件、解析 选项，以及许多增强功能。</p>
<p>7.这种方式还是不是很方便，我们可以设置还可以在设置快捷方式，可以再<code>package.json</code>里面配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;webpack-demo&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">    &quot;build&quot;: &quot;webpack&quot; //配置在这里</div><div class="line">  &#125;,</div><div class="line">  &quot;keywords&quot;: [],</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;webpack&quot;: &quot;^2.2.1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;lodash&quot;: &quot;^4.17.4&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置好了之后，通过<code>npm run build</code> 就可以启动了</p>
<p>8.文件目录如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4760143-be44b9a60adc5b11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="}NQ31WDS$Y_W}{7@7L4JD3H.png"></p>
<p>9.这就是webpack最基本的用法</p>
<p>###参考文档<br><a href="http://www.css88.com/doc/webpack2/" target="_blank" rel="external">webpack2</a></p>
]]></content:encoded>
      
      <comments>https://oldboyyyy.github.io/2017/03/18/webpack-1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
